name: CMake Build Matrix

# Controls when the action will run. Triggers the workflow on push
on: 
  repository_dispatch:
    types: [manual]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.arch }}-${{ matrix.python_version }}-${{ matrix.generator }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        build_type: ["Release", "Debug"]
        arch: ["x64", "x86"]
        python_version: [3.6]
        generator: ["Ninja", "Unix Makefiles", "Visual Studio 2019"]
        exclude:
        - os: macos-latest
        - os: windows-latest
        - os: ubuntu-latest
          generator: "Visual Studio 2019"

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set env variables for subsequent steps (windows)
        if: startswith(matrix.os, 'windows')
        run: |
          echo "::set-env name=TRIPLET::${{matrix.arch}}-windows-static"
          echo "test"

      - name: Set env variables for subsequent steps (ubuntu)
        if: startswith(matrix.os, 'ubuntu')
        run: |
          echo "::set-env name=TRIPLET::${{matrix.arch}}-linux"

      - name: Set env variables for subsequent steps (macos)
        if: startswith(matrix.os, 'macos')
        run: |
          echo "::set-env name=TRIPLET::${{matrix.arch}}-osx"

      - name: Set env variables for subsequent steps (all)
        run: |
          echo "::set-env name=TRIPLET_FILENAME::vcpkg_${{ env.TRIPLET }}_response_file.txt"
          echo "::set-env name=RESPONSE_FILE::response_file.txt"
          echo "::set-env name=RESPONSE_FILE_FULL::external/response_file.txt"

      - name: Set env variable test
        if: matrix.arch=='x86'
        run: |
          echo "::set-env name=SOMETHING_FOO::1"

      - name: Print env variable test
        if: env.SOMETHING_FOO
        run: |
          echo  "YEAH THIS WORKED"

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
          echo $TRIPLET
          echo $TRIPLET_FILENAME
      
      - uses: actions/cache@v2
        id: cache
        with:
          path: vcpkg/installed
          # WORKS
          #key: dev-${{ matrix.os }}-${{ hashFiles(format('external/{0}', env.RESPONSE_FILE)) }}
          key: dev3-${{ matrix.os }}-${{ hashFiles(format('{0}', env.RESPONSE_FILE_FULL)) }}

      - name: Copy triplet file
        run: |
          cp external/x86-linux.cmake vcpkg/triplets/x86-linux.cmake

      - name: Install gcc 32bit support libraries
        run: |
          sudo apt install gcc-multilib g++-multilib libc6-dev-i386 lib32stdc++6

      - name: Install dependencies on windows
        if: steps.cache.outputs.cache-hit!='true'
        run: |
          ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh -disableMetrics
          #${{ github.workspace }}/vcpkg/vcpkg install @external/response_file.txt
          ${{ github.workspace }}/vcpkg/vcpkg install @${{env.RESPONSE_FILE_FULL}} --debug
          #${{ github.workspace }}/vcpkg/vcpkg install tinyxml --triplet ${{ matrix.arch }}-windows-static
        # cmd "${{ matrix.config.environment_script }}"

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
          echo "test_vcpkg_installed"

      - name: pip cache
        id: cache-pip
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: dev1-${{ runner.os }}-pip-${{ hashFiles('external/pip_requirements.txt') }}

      - name: Setup python 
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
          architecture: x64

      - name: Install pip packages
        if: steps.cache-pip.outputs.cache-hit!='true'
        run: |
          python -m pip install --upgrade pip
          pip install -r external/pip_requirements.txt

      - name: Configure
        shell: bash
        run: |
          mkdir build
          ls vcpkg/installed
          cmake \
            -S . \
            -B build \
            -A Win32 \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_TARGET_TRIPLET=x86-linux

      - name: Build
        shell: bash
        run: cmake --build build --config ${{ matrix.config.build_type }} -j 8

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: crash-vcpkg-compiler-not-found
          path: |
            vcpkg/buildtrees/detect_compiler

