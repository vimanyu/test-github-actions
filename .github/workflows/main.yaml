name: CMake Build Matrix

# Controls when the action will run. Triggers the workflow on push
on: 
  push:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.arch }}-${{ matrix.python_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        build_type: ["Release", "Debug"]
        arch: ["x64", "x86"]
        python_version: [2.7, 3.6]
        exclude:
        - os: macos-latest
          arch: "x86"
        - os: ubuntu-latest
          arch: "x86"

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: true


      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
      
      - uses: actions/cache@v2
        id: cache
        with:
          path: ${{ github.workspace }}/vcpkg
          key: ${{ matrix.os }}-${{ hashFiles('external/response_file.txt') }}


      - name: Install dependencies on windows
        if: startsWith(matrix.os, 'windows') && steps.cache.outputs.cache-hit != 'true'
        run: |
          ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.bat -disableMetrics
          ${{ github.workspace }}/vcpkg/vcpkg install tinyxml --triplet ${{ matrix.arch }}-windows-static
        # cmd "${{ matrix.environment_script }}"

      - name: Install dependencies on linux 
        if: startsWith(matrix.os, 'ubuntu') && steps.cache.outputs.cache-hit != 'true'
        run: |
          ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh -disableMetrics
          ${{ github.workspace }}/vcpkg/vcpkg install tinyxml --triplet ${{ matrix.arch }}-linux
          #${{ github.workspace }}/vcpkg/vcpkg install @external/response_file.txt

      - name: Install dependencies on macos
        if: startsWith(matrix.os, 'macos') && steps.cache.outputs.cache-hit != 'true'
        run: |
          ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh -disableMetrics
          ${{ github.workspace }}/vcpkg/vcpkg install tinyxml --triplet ${{ matrix.arch }}-osx
          #${{ github.workspace }}/vcpkg/vcpkg install @external/response_file.txt

      - name: Setup python and install dependencies
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}
          architecture: ${{ matrix.arch }}
      - run: |
          python -m pip install --upgrade pip
          pip install protobuf
          
      - name: Configure (windows)
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: |
          mkdir build
          ls vcpkg/installed
          cmake \
            -S . \
            -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_GENERATOR_PLATFORM=${{ matrix.arch }} \
            -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_TARGET_TRIPLET=${{ matrix.arch }}-windows-static

      - name: Configure (linux)
        if: startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          mkdir build
          ls vcpkg/installed
          cmake \
            -S . \
            -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_GENERATOR_PLATFORM=${{ matrix.arch }} \
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET=${{ matrix.arch }}-linux

      - name: Configure (macos)
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          mkdir build
          ls vcpkg/installed
          cmake \
            -S . \
            -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_GENERATOR_PLATFORM=${{ matrix.arch }} \
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET=${{ matrix.arch }}-osx

      - name: Build
        shell: bash
        run: |
            cmake --build build --config ${{ matrix.build_type }} -j 8
            find build -name "*.a"
            find build -name "*.lib"

